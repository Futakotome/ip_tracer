VALID_TOOLCHAINS := pnacl glibc clang-newlib

NACL_SDK_ROOT ?= D:\nacl\nacl_sdk\nacl_sdk\pepper_49

TARGET = socket


include $(NACL_SDK_ROOT)/tools/common.mk


CHROME_ARGS += --allow-nacl-socket-api=localhost

LIBS = jsoncpp ppapi_cpp ppapi pthread

CFLAGS = -Wall
SOURCES = socket.cc	\
	echo_server.cc

.PHONY: httpd
httpd:
	python -m SimpleHTTPServer 5103 -C ${CURDIR}
	
# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
